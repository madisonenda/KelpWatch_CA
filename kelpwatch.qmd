---
title: "kelpwatch_data"
author: "Maddy Enda"
format: html
editor: visual
---

### Call libraries

```{r}
# Load in the packages for this data analysis
librarian::shelf(tidyverse, dplyr, terra, tmap, sf, here, stars, janitor, units, tidync)
```

### Load in our biota data

```{r}
# Read in kelp data from KelpWatch : NOTE: it is not georeferenced like a normal nc, and must be wrangled and reprojected
kelpwatch_raw <- tidync(here::here('LandsatKelpBiomass_2024_Q4_withmetadata.nc'))
```

### Load in CA MPA boundaries

```{r}
# Read in MPA boundaries data
boundary.dir <- "/capstone/marinebiomaps/data/MPA_boundaries"
mpa_boundaries <- sf::st_read(file.path(boundary.dir, "California_Marine_Protected_Areas_[ds582].shp"))

# Clean the names
mpas <- mpa_boundaries %>%
   clean_names()
```

### Unpack the coordinates of the kelp data and make sf objects

```{r}
# First, lets work with the kelp data
# Transform the latitude grid into a data frame
kelp_lat <- kelpwatch_raw %>%
  activate("latitude") %>%
  hyper_tibble()
# Transform the longitude grid into a data frame
kelp_lon <- kelpwatch_raw %>%
  activate("longitude") %>%
  hyper_tibble()
# Join the two geo info
kelp_latlon <- left_join(kelp_lat, kelp_lon, by = "station") %>%
  relocate(station, .before=everything()) %>% 
  # Make into sf object
  st_as_sf(coords=c("longitude", "latitude"), crs=4326, remove=FALSE) %>% 
  # Reproject to linear units (NAD UTM 10)
  st_transform(crs = 26910)
```

```{r}
head(kelp_latlon)
```
### Intersect the Kelp points and CA MPAs

```{r}
# Transform sites to match the kelp lat/lon
mpas <- st_transform(mpas, crs = 26910)
kelp_latlon <- st_transform(kelp_latlon, crs= 26910)

# Identify the stations that overlap with the sites
mpa_station_intersect <- st_intersection(kelp_latlon, mpas)
```

```{r}
# Keep the ID column for the kelp counts within MPAs
kelp_counts <- mpa_station_intersect %>%
  select(c('station', 'latitude', 'longitude', 'geometry', 'fullname'))
```

```{r}
# Write the kelp counts to a csv
write_csv(kelp_counts, "kelp_counts")

# Write the mpa data to a csv
write_csv(mpas, "ca_mpas")
```

